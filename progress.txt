## Progress

### Part 1 (6 hrs)
- setup and familiarize code
- run test to understand beforeEach/afterEach
- test API in Insomnia 
- write tests for helper/sql.js/{sqlForPartialUpdate}
- Document the function of sqlForPartialUpdate
    1. sqlForPartialUpdate passes in 2 arguments, first is the data and second is the format of jsToSql.
    2. Once data is passed in, it is turned into an array and then mapped to create a key and variable value like 'first_name=$1, age='$2'. This is in preparation for the UPDATE syntax in psql. 
    3. The function returns the formatted syntax for psql as well as actual values that will be updated. 
    4. In models/user.js we can destructure the return of sqlForPartialUpdate() of the columns to be updated as well as the values which help to efficiently write the UPDATE syntax in psql. 

### Part 2 (9.5hrs)
- Add filter to GET /companies. Filter based on optional filtering criteria: name, minEmployees, maxEmployees. ( if minEmployees > maxEmployees respond with a 400 error)
Requirements:
    - If user is not filtering by minEmployees/maxEmployeees, SELECT statement should not include anything about num_employees.
    - validate the request to not contain inappropriate fields. Do actual filtering in the models.
    - Write unit test for the model exercising in different ways so you know different combos of filtering work.
    - Write test for the route to ensure it validates/uses model properly.
    - document all code clearly, so future team members should be able to understand how to use them from docstring.

    Summary:
        - Didn't use varibale index in query search because the array at the end of the query would cause a problem if there was no criteria in the query. Did all the syntax seperately, then integrated the syntax in.
        - Test models by trying different queries. 
        - Testing routes called for updating jsonSchema to validate valid fields.
        - Since there were is no schema type to validate numbers as strings, I set a limit to the maxEmployee length to be 7 meaning the maxEmployee would cap at 9,999,999.
        - Passing in a string would cause an error since the model will be unable to parse it. 
        -Testing took an hour to write/fix and the query syntax took 8.5hrs!
    
### Part 3 (2hr)

- Some routes do not have authorization checks:
    ##### Companies:
    - list of company/info should be open to everyone, even anon users.
    - create/update/deleting companies are only possible for users who are logged in with is_admin flag in the db.
    - do not need to SELECT info about the user on every request, but auth credit should provide info suitable for this requirement. 
    - Update tests to demo security changes.

Summary: 
    - Since only admins can create, update, delete, would make sense to verify admin in 'ensureLoggedIn()'
    - Only admins can , create,get list of users, update, delete. admin or that user can get info on a single user.
    - Create another middleware that checks for either the correct user or an admin. Users that go to view, update, delete their own information will have access.

### Part 4

    - Make jobs model.
    - updating a job should never change ID or the company associiated with a job.
    - Write test for the model


Summary:
    - NUMERIC is more precise than using FLOAT and holds a larger byte. Since equity can be a small number, it is more accurate to use NUMERIC.
    - Did not do a duplicateCheck function on Job.create because some actual companies listing identical job titles.

    Todo: clean up parseInt on company model!
    Combine if statment of whereClause and combinedWhereSyntax together!